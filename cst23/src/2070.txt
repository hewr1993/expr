#include <cstdio>
#include <algorithm>
#include <queue>
using namespace std;
const int MMax=4000;
const int NMax=400;
struct edge{
	int e,f;
	int dir;
	edge * next,*opt;
}epool[MMax*2],*E[NMax],*etop;
int N,M;
long long dist[NMax];
int A[NMax];
int edges[MMax][3];
void addedge(int x,int y,int c1,int c2){
	edge *p=etop++;
	edge *q=etop++;
	p->e=y;p->f=c1;p->next=E[x];E[x]=p;p->opt=q;
	p->dir=0;
	q->e=x;q->f=c2;q->next=E[y];E[y]=q;q->opt=p;
	q->dir=1;
}
int Q[NMax],level[NMax];
bool used[NMax];
void dfs(int a){
	used[a]=true;
	for (edge *p=E[a];p;p=p->next)
		if (p->f && !used[p->e])
			dfs(p->e);
}
bool checksole(){
	for (int i=0;i<N;i++)
		if (level[i]!=-1){
			//i is on the left-hand side of the cut
			for (edge * p=E[i];p;p=p->next)
				if (p->dir==0 && level[p->e]==-1){
					//(i,p->e) is a cut-edge
					if (A[i]==A[p->e])
						return false;
					//check if p->e can reach N-1
					for (int j=0;j<N;j++)
						used[j]=false;
					dfs(p->e);
					//p->e cannot reach N-1, so increasing
					//the cap of (i,p->e) won't increase the flow
					if (!used[N-1])
						return false;
				}
		}
	return true;
}
const long long Inf=1000000000000000LL;
void Dijkstra(){
	for (int i=0;i<N;i++)dist[i]=Inf;
	dist[0]=0;
	priority_queue<pair<long long,int>,vector<pair<long long,int> >,greater<pair<long long,int> > >
		PQ;
	PQ.push(make_pair(0LL,0));
	while (!(PQ.empty())){
		int x=PQ.top().second;
		long long d=PQ.top().first;
		PQ.pop();
		if (d!=dist[x])continue;
		for (edge *p=E[x];p;p=p->next){
			if (dist[p->e]>d+p->f){
				dist[p->e]=d+p->f;
				PQ.push(make_pair(dist[p->e],p->e));
			}
		}
	}
}
bool makelevel(){
	for (int i=0;i<N;i++)level[i]=-1;
	level[0]=0;
	Q[0]=0;
	for (int top=0,bot=1;top!=bot;){
		int x=Q[top];
		top++;if (top==NMax)top=0;
		for (edge *p=E[x];p;p=p->next)
			if (p->f && level[p->e]==-1){
				level[p->e]=level[x]+1;
				Q[bot++]=p->e;
				if (bot==NMax)bot=0;
			}
	}
	return level[N-1]!=-1;
}
long long extendpath(int a,long long r){
	if (a==N-1)return r;
	long long t=r;
	for (edge *p=E[a];p && t;p=p->next)
		if (p->f && level[p->e]==level[a]+1)
			if (long long s=extendpath(p->e,min((long long)p->f,t))){
				p->f-=s;
				p->opt->f+=s;
				t-=s;
			}
	if (t==r)level[a]=-1;
	return r-t;
}
long long Dinic(){
	long long r=0;
	while (makelevel())
		while (long long t=extendpath(0,Inf))
			r+=t;
	return r;
}
void work(){
	Dijkstra();
	for (int i=0;i<N;i++)E[i]=NULL;
	etop=epool;
	for (int i=0;i<M;i++){
		int x=edges[i][0],y=edges[i][1],c=edges[i][2];
		if (dist[x]==dist[y]+c)
			addedge(y,x,min(A[x],A[y]),0);
		if (dist[y]==dist[x]+c)
			addedge(x,y,min(A[x],A[y]),0);
	}
	long long r=Dinic();
	//check whether the solution is unique
	makelevel();
	if (checksole())
		printf("Yes %lld
",r);
	else printf("No %lld
",r);
}
int main()
{
	int TT;
	scanf("%d",&TT);
	while (TT--){
		scanf("%d%d",&N,&M);
		for (int i=0;i<N-1;i++)
			scanf("%d",A+i);
		A[N-1]=1000000001;
		etop=epool;
		for (int i=0;i<N;i++)
			E[i]=NULL;
		for (int i=0;i<M;i++){
			int x,y,c;
			scanf("%d%d%d",&x,&y,&c);
			x--;y--;
			edges[i][0]=x;edges[i][1]=y;edges[i][2]=c;
			addedge(x,y,c,c);
		}
		work();
	}
	return 0;
}


