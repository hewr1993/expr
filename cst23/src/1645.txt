/*
ID	:daaqing1
PROG	:prime3
LANG	:C++
*/

#include <cstdio>
#include <cstring>


int	A[6],a[6][6],ans[500][6][6];
int	s1[20000][5],s2[10][2000][4],s3[10][10][200][3],s4[10][10][10][20][2],s5[10][10][10][20][2];
bool	p[100005];
int	sum,BB,i,j,k,l,x,tmp,ANS=0;


inline void MakePrimeList()
{
	memset(p,1,sizeof(p));
	for (i=2;i<99999;++i)
	if (p[i])
	{
		for (j=i+i;j<99999;j+=i)
		p[j]=0;
		if (i<9999) continue;
		x=i;
		for (j=5;j>0;--j,x/=10) A[j]=x%10;
		if (A[1]+A[2]+A[3]+A[4]+A[5]!=sum) continue;
		
		if (A[1]==BB)
		{
			x=++s1[0][0];
			for (j=2;j<6;++j) s1[x][j-2]=A[j];
		}
		
		if (i==13313)
			x=0;
		
		j=A[3]; x=++s2[j][0][0];
		s2[j][x][0]=A[1]; s2[j][x][1]=A[2]; s2[j][x][2]=A[4]; s2[j][x][3]=A[5];
		
		j=A[1]; k=A[5]; x=++s3[j][k][0][0];
		s3[j][k][x][0]=A[2]; s3[j][k][x][1]=A[3]; s3[j][k][x][2]=A[4];
		
		j=A[1]; k=A[3]; l=A[5]; x=++s4[j][k][l][0][0];
		s4[j][k][l][x][0]=A[2]; s4[j][k][l][x][1]=A[4];
		
		j=A[2]; k=A[3]; l=A[4]; x=++s5[j][k][l][0][0];
		s5[j][k][l][x][0]=A[1]; s5[j][k][l][x][1]=A[5];
	}
}

inline void check()
{
	int	i,j,x;
	for (j=1;j<6;++j) if (j!=3)
	{
		x=0;
		a[3][j]=sum-a[1][j]-a[2][j]-a[4][j]-a[5][j];
		if (a[3][j]<0 || a[3][j]>9) return;
		x=0;
		for (i=1;i<6;++i) x=x*10+a[i][j];
		if (!p[x]) return;
	}
	if (a[3][1]+a[3][2]+a[3][3]+a[3][4]+a[3][5]!=sum) return;
	x=0;
	for (j=1;j<6;++j) x=x*10+a[3][j];
	if (x<10000 || !p[x]) return;
	
	++ANS;
	for (i=1;i<6;++i)
	for (j=1;j<6;++j)
	ans[ANS][i][j]=a[i][j];
}

inline void DFSrow4()
{
	int	i,j=a[4][2],k=a[4][3],l=a[4][4],m,x;
	for (i=1;i<=s5[j][k][l][0][0];++i)
	{
		a[4][1]=s5[j][k][l][i][0]; a[4][5]=s5[j][k][l][i][1];
		for (m=1,x=0;m<6;++m) x=x*10+a[m][3]; if (!p[x]) continue;
		check();
	}
}

inline void DFSrow2()
{
	int	i,j=a[2][2],k=a[2][3],l=a[2][4];
	for (i=1;i<=s5[j][k][l][0][0];++i)
	{
		a[2][1]=s5[j][k][l][i][0]; a[2][5]=s5[j][k][l][i][1];
		DFSrow4();
	}
}

inline void DFScross3()
{
	int	i,j=a[1][3],k=a[3][3],l=a[5][3];
	for (i=1;i<=s4[j][k][l][0][0];++i)
	{
		a[2][3]=s4[j][k][l][i][0]; a[4][3]=s4[j][k][l][i][1];
		DFSrow2();
	}
}

inline void DFSrow5()
{
	int	i,j=a[5][1],k=a[5][5],l;
	for (i=1;i<=s3[j][k][0][0];++i)
	{
		for (l=2;l<5;++l) a[5][l]=s3[j][k][i][l-2];
		DFScross3();
	}
}

inline void DFSrow1()
{
	int	i,j=a[1][1],k=a[1][5],l;
	for (i=1;i<=s3[j][k][0][0];++i)
	{
		for (l=2;l<5;++l) a[1][l]=s3[j][k][i][l-2];
		if (!a[1][2] || !a[1][3] || !a[1][4]) continue;
		DFSrow5();
	}
}

inline void DFSdia2()
{
	int	i,j=a[3][3];
	for (i=1;i<=s2[j][0][0];++i)
	{
		a[5][1]=s2[j][i][0]; a[4][2]=s2[j][i][1];
		a[2][4]=s2[j][i][2]; a[1][5]=s2[j][i][3];
		DFSrow1();
	}
}

inline void DFSdia1()
{
	memset(a,0,sizeof(a)); a[1][1]=BB;
	for (i=1;i<=s1[0][0];++i)
	{
		for (j=2;j<6;++j) a[j][j]=s1[i][j-2];
		DFSdia2();
	}
}

inline void Sort()
{
	for (i=1;i<ANS;++i)
	for (j=i+1;j<=ANS;++j)
	{
		x=0;
		for (k=1;k<6 && !x;++k)
		for (l=1;l<6 && !x;++l)
		if (ans[i][k][l]<ans[j][k][l]) x=-1; else
		if (ans[i][k][l]>ans[j][k][l]) x=1;
		if (x==-1) continue;
		for (k=1;k<6;++k)
		for (l=1;l<6;++l)
		{
			tmp=ans[i][k][l]; ans[i][k][l]=ans[j][k][l]; ans[j][k][l]=tmp;
		}
	}
}

int main()
{
//	freopen("prime3.in","r",stdin);
//	freopen("prime3.out","w",stdout);
	
	scanf("%d%d",&sum,&BB);
	MakePrimeList();
	DFSdia1();
	Sort();
	for (i=1;i<=ANS;++i)
	{
		for (k=1;k<6;++k)
		{
			for (l=1;l<6;++l) printf("%d",ans[i][k][l]);
			printf("
");
		}
		if (i<ANS) printf("
");
	}
	if (!ANS) printf("NONE
");
	
	return 0;
}

