//183D
#include <iostream>
#include <cstdio>
#include <map>
#include <utility>
#include <queue>
using namespace std;
const int MAXN=3000;
const int MAXM=300;
double p[MAXN+10][MAXM+10];
double ppre[MAXM+10][MAXN+10],ccur[MAXM+10][MAXN+10];
double (*pre[MAXM+10])[MAXN+10],(*cur[MAXM+10])[MAXN+10];
int n,m;
double f(bool usePre,int TS,int pep,int cnt){
	if(cnt<=0)return 1;
	if(cnt>pep)return 0;
	if(usePre)return (*pre[TS])[pep];
	return (*cur[TS])[pep]=f(true,TS,pep-1,cnt-1)*p[pep][TS]+f(usePre,TS,pep-1,cnt)*(1-p[pep][TS]);
}
int main(){
	for(int i=0;i<=MAXM;i++){
		pre[i]=&ppre[i];
		cur[i]=&ccur[i];
	}

	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++){
			scanf("%lf",&p[i][j]);
			p[i][j]/=1000;
		}
	
	typedef pair<double,pair<int,int> > Pair;
	priority_queue<Pair> q;
	for(int i=1;i<=m;i++)
		q.push(make_pair(f(false,i,n,1),make_pair(i,1)));
		
	double ans=0;
	for(int i=1;i<=n;i++){
		ans+=q.top().first;
		pair<int,int> which=q.top().second;
		q.pop();
		if(i<n){
			swap(pre[which.first],cur[which.first]);
			q.push(make_pair(f(false,which.first,n,which.second+1),make_pair(which.first,which.second+1)));
		}
	}
	
	printf("%.9f
",ans);
	return 0;
}
