/*
　　扫雷游戏你一定玩过吧！现在给你若干个n×m的地雷阵，
请你计算出每个矩阵中每个单元格相邻单元格内地雷的个数，每个单元格最多有8个相邻的单元格。 
0<n,m<=100
输入格式
　　输入包含若干个矩阵，对于每个矩阵，第一行包含两个整数n和m，
分别表示这个矩阵的行数和列数。接下来n行每行包含m个字符。安全区域用‘.’表示，
有地雷区域用'*'表示。当n=m=0时输入结束。
输出格式
　　对于第i个矩阵，首先在单独的一行里打印序号：“Field #i:”,接下来的n行中，
读入的'.'应被该位置周围的地雷数所代替。输出的每两个矩阵必须用一个空行隔开。
样例输入
4 4
*...
....
.*..
....
3 5
**...
.....
.*...
0 0
样例输出
Field #1:
*100
2210
1*10
1110
Field #2:
**100
33200
1*100
（注意两个矩阵之间应该有一个空行，由于oj的格式化这里不能显示出来）
数据规模和约定
　　0<n,m<=100 
*/
#include <iostream>
#include <cstdlib>
using namespace std;
int main()
{
    int n, m;
    char a[102][102];
    int b[102][102]={0};
    int count = 0;
    while( true )
    {
           cin >> n >> m;    
           if( n == 0 && m == 0 )
               break;
           count++;
           for( int i = 1; i <= n; i++ )
               for( int j = 1; j <= m; j++ )
                   cin >> a[i][j];
           cout << "Field #" << count << ":"<<endl;
           for( int i = 1; i <= n; i++ )
           {
                for( int j = 1; j <= m; j++ )
                {
                     if( a[i][j] == '*' )
                     {
                         b[i][j] = 42;
                         for( int e = i - 1; e <= i + 1; e++ )
                             for( int f = j - 1; f <= j + 1; f++ )
                             {
                                  if( a[e][f] == '*' )
                                      continue;
                                  else
                                      b[e][f]++;
                             }
                     }
                     
                }
           }
           for( int i = 1; i <= n; i++ )
           {
                for( int j = 1; j <= m; j++ )
                {
                     if( b[i][j] == 42 )
                         cout << char(42);
                     else
                         cout << b[i][j];
                }
                cout << endl;
           } 
           cout << endl;
           for( int i = 1; i <= 102; i++ )
               for( int j = 1; j <= 102; j++ )
                   b[i][j] = 0; 
           for( int i = 1; i <= n; i++ )
               for( int j = 1; j <= m; j++ )
                   a[i][j]='.';       
    }
    system("pause");
    return 0;
}
