//program 2139

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>

using namespace std;

struct Node
{
  int Number,Value;
};

bool operator <(Node A,Node B)
{
  return A.Value>B.Value;
}

void Get(Node *A,int N)
{
  int x,y,z;scanf("%d%d%d%d%d",&A[0].Value,&A[1].Value,&x,&y,&z);
  for(int i=0;i<N;i++)A[i].Number=i;
  for(int i=2;i<N;i++)A[i].Value=(A[i-1].Value*x+A[i-2].Value*y+z)%32767;
  for(int i=0;i<N;i++)A[i].Value=A[i].Value*A[i].Value;
  sort(A,A+N);
}

int Parent[1000000];

int Root(int X)
{
  return (Parent[X]==X)?X:(Parent[X]=Root(Parent[X]));
}

int main()
{
  int N;scanf("%d",&N);
  static Node A[1000000],B[1000000];
  Get(A,N);Get(B,N);
  int Ans=0;
  for(int i=0;i<N;i++)
    Ans=max(Ans,A[i].Value-B[i].Value);
  for(int i=0;i<N;i++)Parent[i]=i;
  for(int i=0;i<N;i++)
    Parent[Root(A[i].Number)]=Root(B[i].Number);
  static Node E[1000000];
  for(int i=1;i<N;i++)
    E[i]=(Node){i,A[i-1].Value-B[i].Value};
  sort(E+1,E+N);
  for(int i=N-1;i;i--)
    {
      int V=E[i].Number,X=Root(A[V-1].Number),Y=Root(B[V].Number);
      if(X!=Y){Parent[X]=Y;Ans=max(Ans,E[i].Value);}
    }
  printf("%d
",Ans);
  return 0;
}

