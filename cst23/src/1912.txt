#include <cstdio>
#include <cstring>
#include <cmath>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <map>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int inf=(1<<30);
const int N=5000050;

int n,b;
bool isprime[N];
int p[670000],num;
void init_prime() {
   int lim=sqrt(N*2+1.0)/2; // 只需筛选到一半
   int Maxindex=(N*2-1)>>1;
   int i,j,k;
   for(i=1;i<=lim;++i) {
      if(!isprime[i]) {
         j=i+i+1; // 计算表示域的增加
         for(k=2*i*(i+1);k<=Maxindex;k+=j) isprime[k]=1;
      }
   }
   p[num=1]=2;
   for(i=1;i<=Maxindex;i++)
      if(!isprime[i]) p[++num]=i+i+1;
}

int mul(int a,int k,int mod) {
   int ret=1;
   a%=mod;
   for(;k;k>>=1) {
      if(k&1) ret=ret*a%mod;
      a=a*a%mod;
   }
   return ret;
}

int cntn[670000],cntb[670000];

int main()
{
   init_prime();
   int i,j,t,cas=0;
   scanf("%d",&t);
   while(t--) {
      scanf("%d%d",&n,&b);

      int nn=max(n,b);
      for(i=1;p[i]<=nn;i++) cntn[i]=cntb[i]=0;

      for(i=1;p[i]<=n&&i<=num;i++) {
         int x=n;
         while(x) x/=p[i],cntn[i]+=x;
      }
      int x=b;
      for(i=1;p[i]<=b;i++) {
         if(x%p[i]==0) {
            while(x%p[i]==0) x/=p[i],cntb[i]++;
         }
      }

      int mi=100000000;
      for(i=1;p[i]<=b;i++)
         if(cntb[i]) mi=min(mi,cntn[i]/cntb[i]);
      for(i=1;p[i]<=b;i++)
         if(cntb[i]) cntn[i]-=cntb[i]*mi;

      int ret=1;
      for(i=1;p[i]<=n&&i<=num;i++)
         if(cntn[i]) ret=ret*mul(p[i],cntn[i],b)%b;

      printf("Case %d: %d
",++cas,ret);
   }
   return 0;
}

/*
3
10 10
13 6
10000000 10000
*/

