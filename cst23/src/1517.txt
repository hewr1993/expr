#include<algorithm>
#include<iostream>
#include<cstdio>
#include<map>

using namespace std;

const int maxn = 20010;
const int maxm = 1000010;

struct state {
	int id , v;
};
struct tree {
	int lch , rch , sum , pre , suf;
};

int n , m , q[4] , ans;
state data[maxn];

int tot , root[maxn];
tree node[maxm];
map<int,int> M;

bool cmp( const state &A , const state &B ) {
	return A.v < B.v;
}

tree update( tree &root , tree lch , tree rch ) {
	root.sum = lch.sum + rch.sum;
	root.pre = max( lch.pre , lch.sum + rch.pre );
	root.suf = max( rch.suf , rch.sum + lch.suf );
}

void insert( int lt , int t , int l , int r , int x , int p ) {
	if ( l == r ) {
		node[t].pre = node[t].suf = node[t].sum = p;
		return;
	}
	int mid = ( l + r ) >> 1;
	if ( x <= mid ) {
		int nt = node[lt].lch;
		node[t].lch = ++tot;
		node[t].rch = node[lt].rch;
		insert( nt , tot , l , mid , x , p );
	} else {
		int nt = node[lt].rch;
		node[t].lch = node[lt].lch;
		node[t].rch = ++tot;
		insert( nt , tot , mid + 1 , r , x , p );
	}
	
	update( node[t] , node[node[t].lch] , node[node[t].rch] );
}

tree caln( int t , int l , int r , int x , int y ) {
	if ( l == x && y == r ) return node[t];
	int mid = ( l + r ) >> 1;
	if ( y <= mid ) return caln( node[t].lch , l , mid , x , y );
	if ( x >= mid + 1 ) return caln( node[t].rch , mid + 1 , r , x , y );
	tree ret;
	update( ret , caln( node[t].lch , l , mid , x , mid ) , caln( node[t].rch , mid + 1 , r , mid + 1 , y ) );
	return ret;
}

void input() {
	scanf( "%d" , &n );
	
	for ( int i = 1 ; i <= n ; i++ ) {
		data[i].id = i;
		scanf( "%d" , &data[i].v );
	}
	
	sort( data + 1 , data + 1 + n , cmp );
	for ( int i = n ; i >= 1 ; i-- )
		M[data[i].v] = i;
	
	root[1] = ++tot;
	for ( int i = 1 ; i <= n ; i++ )
		insert( root[1] , root[1] , 1 , n , data[i].id , 1 );
	for ( int i = 2 ; i <= n ; i++ ) {
		root[i] = ++tot;
		insert( root[i - 1] , root[i] , 1 , n , data[i - 1].id , -1 );
	}
}

void solve() {
	scanf( "%d" , &m );
	
	for ( int T = 1 ; T <= m ; T++ ) {
		for ( int i = 0 ; i < 4 ; i++ ) {
			scanf( "%d" , &q[i] );
			q[i] = ( q[i] + ans ) % n + 1;
		}
		sort( q , q + 4 );
		
		int s = 1 , t = n;
		while ( s < t ) {
			int mid = ( s + t + 1 ) >> 1;
			int p = M[data[mid].v];
			int ret = caln( root[p] , 1 , n , q[0] , q[1] ).suf + caln( root[p] , 1 , n , q[2] , q[3] ).pre;
			if ( q[1] + 1 <= q[2] - 1 ) ret += caln( root[p] , 1 , n , q[1] + 1 , q[2] - 1 ).sum;
			if ( ret >= 0 ) s = mid;
				else t = mid - 1;
		}
		ans = data[s].v;
		
		printf( "%d
" , ans );
	}
}

int main() {
	input();
	solve();
	
	return 0;
}

