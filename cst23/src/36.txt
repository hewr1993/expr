const maxn=400100; 
type node=record
       x,y:longint; 
     end; 
var po,answer,left,right,s:array[0..maxn]of longint; 
    key:array[0..maxn]of node; 
    f:array[0..maxn,0..19]of longint; 
    a:array[0..maxn,1..2]of longint; 
    n,i,j,tot,inf,t,top,ans,tt:longint; 
    le,re,mi,highv,lowv:node; 
procedure sort(x,y:longint); 
var i,j,k:longint; 
begin
    i:=x; 
    j:=y; 
    k:=po[x+random(y-x+1)]; 
    repeat
      while po[i]<k do inc(i); 
      while po[j]>k do dec(j); 
      if i<=j then begin
         po[0]:=po[i]; 
         po[i]:=po[j]; 
         po[j]:=po[0]; 
         inc(i); 
         dec(j); 
      end; 
    until i>j; 
    if i<y then sort(i,y); 
    if x<j then sort(x,j); 
end; 
function min(a,b:longint):longint; 
begin
    if a<b then exit(a);exit(b); 
end; 
function find(v:longint):longint; 
var l,r,m:longint; 
begin
    l:=1; 
    r:=tot; 
    while l<r do begin
      m:=(l+r)shr 1; 
      if po[m]<v then l:=m+1
      else r:=m; 
    end; 
    exit(l); 
end; 
function calc(l,r:longint):longint; 
var i:longint; 
begin
    if l>r then exit(0); 
    calc:=0; 
    for i:=top downto 0 do begin
        if l>r then exit; 
        if f[l,i]<=r then begin
           l:=f[l,i]+1; 
           inc(calc,1 shl i); 
        end; 
    end; 
end; 
procedure left_rotate(var t:longint); 
var k:longint; 
begin
    k:=right[t]; 
    right[t]:=left[k]; 
    left[k]:=t; 
    s[k]:=s[t]; 
    s[t]:=s[left[t]]+s[right[t]]+1; 
    t:=k; 
end; 
procedure right_rotate(var t:longint); 
var k:longint; 
begin
    k:=left[t]; 
    left[t]:=right[k]; 
    right[k]:=t; 
    s[k]:=s[t]; 
    s[t]:=s[left[t]]+s[right[t]]+1; 
    t:=k; 
end; 
procedure insert(var t:longint;var v:node); 
begin
    if t=0 then begin
       inc(tt); 
       t:=tt; 
       key[t]:=v; 
       left[t]:=0;right[t]:=0; 
       s[t]:=1; 
       exit; 
    end; 
    inc(s[t]); 
    if v.x<key[t].x then begin
       insert(left[t],v); 
       if s[left[left[t]]]>s[right[t]] then right_rotate(t); 
    end else begin
       insert(right[t],v); 
       if s[right[right[t]]]>s[left[t]] then left_rotate(t); 
    end; 
end; 
function tall(a,b:node):node; 
begin
    if a.x>b.x then exit(a);exit(b); 
end; 
function short(a,b:node):node; 
begin
    if a.x<b.x then exit(a);exit(b); 
end; 
function pred(var t:longint;v:node):node; 
begin
    if t=0 then exit(lowv); 
    if v.x<key[t].x then pred:=pred(left[t],v) 
    else pred:=tall(key[t],pred(right[t],v)); 
end; 
function succ(var t:longint;v:node):node; 
begin
    if t=0 then exit(highv); 
    if v.x>key[t].x then succ:=succ(right[t],v) 
    else succ:=short(key[t],succ(left[t],v)); 
end; 
begin
    randomize; 
    readln(n); 
    tot:=0; 
    tt:=0; 
    for i:=1 to n do begin
        readln(a[i,1],a[i,2]); 
        inc(tot);po[tot]:=a[i,1]; 
        inc(tot);po[tot]:=a[i,2]; 
    end; 
    sort(1,tot); 
    tot:=2; 
    for i:=2 to n*2 do
        if po[i]<>po[tot] then begin
           inc(tot); 
           po[tot]:=po[i]; 
        end; 
    inf:=tot+1; 
    filldword(f,sizeof(f)shr 2,inf); 
    for i:=1 to n do begin
        a[i,1]:=find(a[i,1]); 
        a[i,2]:=find(a[i,2]); 
        f[a[i,1],0]:=min(f[a[i,1],0],a[i,2]); 
    end; 
    top:=trunc(ln(n)/ln(2)); 
    for i:=tot downto 0 do f[i,0]:=min(f[i,0],f[i+1,0]); 
    for j:=1 to top do begin
        for i:=tot downto 0 do
            f[i,j]:=min(f[i+1,j],f[f[i,j-1]+1,j-1]); 
        if f[0,j]=inf then begin
           top:=j; 
           break; 
        end; 
    end; 
    writeln(calc(1,tot)); 
    t:=0; 
    le.x:=0;le.y:=0; 
    insert(t,le); 
    le.x:=inf;le.y:=inf; 
    insert(t,le); 
    ans:=0; 
    lowv.x:=-inf;lowv.y:=lowv.x; 
    highv.x:=inf+inf;highv.y:=highv.y; 
    for i:=1 to n do begin
        mi.x:=a[i,1];mi.y:=a[i,2]; 
        le:=pred(t,mi); 
        re:=succ(t,mi); 
        if(le.y>=mi.x)or(mi.y>=re.x)then continue; 
        if calc(le.y+1,mi.x-1)+calc(mi.y+1,re.x-1)+1=calc(le.y+1,re.x-1) then begin
           inc(ans); 
           answer[ans]:=i; 
           insert(t,mi); 
        end; 
    end; 
    for i:=1 to ans-1 do write(answer[i],' '); 
    writeln(answer[ans]); 
end.
