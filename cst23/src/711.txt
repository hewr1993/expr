//program 2149

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<vector>

using namespace std;

const long long inf=1000000000000000000LL;

int Data[100001];

int Find(int L,int R,int X)
{
  int Mid=(L+R)/2;if(Data[Mid]==X)return Mid+1;
  return (X<Data[Mid])?Find(L,Mid-1,X):Find(Mid+1,R,X);
}

int main()
{
  int N;scanf("%d",&N);
  static int A[100001],B[100001];
  A[0]=0;for(int i=1;i<=N;i++)scanf("%d",&A[i]);
  B[0]=0;for(int i=1;i<=N;i++)scanf("%d",&B[i]);
  for(int i=0;i<=N;i++)Data[i]=A[i]-i;
  sort(Data,Data+N+1);
  int Total=1;
  for(int i=1;i<=N;i++)
    if(Data[i]!=Data[i-1])
      Data[Total++]=Data[i];
  static int X[100001];
  for(int i=0;i<=N;i++)X[i]=Find(0,N,A[i]-i);
  static int Len[100001],Max[100002];Len[0]=0;
  for(int i=0;i<=N;i++)Max[i]=-N;
  int Ans=0;
  for(int i=0,j=1;i<N;i++,j++)
    {
      int P=X[i];while(P<=Total){Max[P]=max(Max[P],Len[i]+1);P+=P&-P;}
      Len[j]=-N;P=X[j];while(P){Len[j]=max(Len[j],Max[P]);P^=P&-P;}
      Ans=max(Ans,Len[j]);
    }
  static long long DP[100001];
  static vector<int> List[100001];
  DP[0]=0;long long Best=inf;
  for(int i=1,j=0;j<N;i++,j++)
    {
      if(Len[j]>=0)List[Len[j]].push_back(j);
      DP[j]-=(long long)i*A[j]-(long long)i*j/2;
      DP[i]=inf;
      if(Len[i]>0)
        for(int x=0;x<List[Len[i]-1].size();x++)
          {
            int k=List[Len[i]-1][x];if(X[k]>X[i])continue;
            DP[i]=min(DP[i],DP[k]+(long long)(A[k]-k)*i);
          }
      if(DP[i]<inf)DP[i]+=A[i]+B[i]+(long long)i*j/2;
      if(Len[i]==Ans)
        {
          long long L=N-i;
          Best=min(Best,DP[i]+L*A[i]+L*(L+1)/2);
        }
    }
  cout<<Ans<<' '<<Best<<endl;
  return 0;
}

