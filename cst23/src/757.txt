#include <iostream>
#include <cstring>
#include <string>
#include <stdlib.h>
#include <cmath>

using namespace std;

int graph[30][30];
int mark[30];
char input[2000];
int t, n, num;
int sum;
int pos;

int ab(int x)
{
    if (x < 0)
        return -1 * x;
    return x;
}

bool judgeit ()
{
    int k = 0;
    int medium1[30] = {0};
    int medium2[30] = {0};
    for (int i = 1; i <= 26; i++)
      for (int j = 1; j <= 26; j++)
          medium1[i] = medium1[i] + graph[i][j];
    for (int i = 1; i <= 26; i++)
      for (int j = 1; j <= 26; j++)
          medium2[i] = medium2[i] + graph[j][i];
    for (int i = 1; i <= 26; i++)
    {
        if (medium1[i] != 0)
        {
            pos = i;
            break;
        }
    }
    for (int i = 1; i <= 26; i++)
    {
        if (ab(medium1[i] - medium2[i]) >= 2)
            return false;
        if (ab(medium1[i] - medium2[i]) == 1)
            k++;
        if ((medium1[i] != 0)||(medium2[i] != 0))   
            num++;
        if ((medium1[i] - medium2[i]) == 1)
            pos = i;
    }
    if ((k != 2)&&(k != 0))
        return false;
    return true;
}

void bredth(int point)
{
     mark[point] = 1;
     sum++;
     for (int i = 1; i <= 26; i++)
     {
         if ((graph[point][i] != 0)&&(mark[i] == 0)&&(i != point))
             bredth (i);
     }
}

int main()
{
    cin >> t;
    while (t > 0)
    {
        memset (graph, 0, sizeof(graph));
        cin >> n;
        num = 0;
        sum = 0;
        memset (mark, 0, sizeof(mark));
        for (int i = 1; i <= n; i++)
        {
            cin >> input;
            int med1 = int(input[0]) - 'a' + 1;
            int med2 = int(input[strlen(input) - 1]) - 'a' + 1;
            graph[med1][med2]++;
        }
        bool jjj1 = true;
        bool jjj2 = judgeit();
        bredth (pos);
        if (sum != num)
            jjj1 = false;
        if (jjj1&&jjj2)
            cout << "Ordering is possible." << endl;
        else
            cout << "The door cannot be opened." << endl;
        t--;
    }
    return 0;
}

