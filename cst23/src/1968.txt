#include "cstdio"
#include "cstring"
#include "algorithm"
#define e 1000000000
#define maxn 110
#define maxm 10010
#define mod(x) ((x)>=e?(x)%e:(x))
using namespace std;
typedef long long ll;
struct bigint{
	ll a[3000];
	bigint(){}
	bigint(int x){
		memset(a,0,sizeof(a));
		while(x) a[++a[0]]=mod(x),x/=e;
	}
	bigint operator *(const bigint &x){
		bigint r(0);
		for(int i=1;i<=a[0];i++)
			for(int j=1;j<=x.a[0];j++){
				r.a[i+j-1]+=a[i]*x.a[j];
				r.a[i+j]+=r.a[i+j-1]/e;
				r.a[i+j-1]=mod(r.a[i+j-1]);
			}
		r.a[0]=a[0]+x.a[0];
		while(!r.a[r.a[0]]) r.a[0]--;
		return r;
	}
	bigint operator +(const int &x){
		bigint r=*this;
		r.a[1]+=x;
		for(int i=1;r.a[i]>=e;i++)
			r.a[i+1]+=r.a[i]/e,r.a[i]=mod(r.a[i]);
		if(r.a[r.a[0]+1]) r.a[0]++;
		return r;
	}
	void print(){
		for(int i=a[0];i;i--){
			if(i!=a[0])
				for(int j=e/10;j&&j>a[i];j/=10)
					printf("0");
			printf("%d",(int)a[i]);
		}
		printf("
");
	}
}f[maxm];
struct node{int k,x,y;}b[maxm];
int n,m,a[maxn][maxn],p[maxm],h[maxm],t,ss[maxm][2];
int par[maxm],ver[maxm],nex[maxm],top[maxm];
bool loc[maxn][maxn];
bool operator <(const node &x,const node &y){
	return x.k<y.k;
}
void adde(int x,int y){
	ver[++t]=y,nex[t]=top[x],top[x]=t;
}
int find(int x){
	if(x==par[x]) return x;
	return par[x]=find(par[x]);
}
void work(int x1,int y1,int x2,int y2){
	if(!loc[x1][y1]) return;
	int x=find((x1-1)*n+y1),y=(x2-1)*n+y2;
	p[x]=y;par[x]=y;
}
void work(int x,int y){
	if(x>1) work(x-1,y,x,y);
	if(x<n) work(x+1,y,x,y);
	if(y>1) work(x,y-1,x,y);
	if(y<n) work(x,y+1,x,y);
}
void init(){
	int i,j;
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++){
			scanf("%d",&a[i][j]);
			b[++t].k=a[i][j],b[t].x=i,b[t].y=j;
			par[t]=t;h[t]=a[i][j];
		}
	sort(b+1,b+t+1);
}
void dfs(int x){
	for(int i=top[x];i;i=nex[i]){
		dfs(ver[i]);
		ss[++t][0]=x,ss[t][1]=ver[i];
	}
}
int main(){
//	freopen("in","r",stdin);
//	freopen("out","w",stdout);
	init();
	int i;
	for(i=1;i<=t;i++)
		loc[b[i].x][b[i].y]=1,work(b[i].x,b[i].y);
	t=0;
	for(i=1;i<=n*n;i++){
		f[i]=1;
		if(p[i]!=i) adde(p[i],i);
	}
/*	t=n*n;
	dfs(t=((b[t].x-1)*n+b[t].y));
	f[t]=f[t]+(m-h[t]);f[t].print();*/
	i=n*n;t=0;
	dfs((b[i].x-1)*n+b[i].y);
	for(i=1;i<=t;i++)
		f[ss[i][0]]=f[ss[i][0]]*(f[ss[i][1]]+(h[ss[i][0]]-h[ss[i][1]]));
	t=(b[i].x-1)*n+b[i].y;
	f[t]=f[t]+(m-h[t]);
	f[t].print();
	return 0;
}

