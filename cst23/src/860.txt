/*已知一个有理数类Zrf_Ratio，实现如下的操作符重载形式：
　　friend zrf_Ratio operator-(const zrf_Ratio&);
　　friend zrf_Ratio operator+(const zrf_Ratio&, const zrf_Ratio&);
　　friend zrf_Ratio operator-(const zrf_Ratio&, const zrf_Ratio&);
　　friend zrf_Ratio operator*(const zrf_Ratio&, const zrf_Ratio&);
　　friend zrf_Ratio operator/(const zrf_Ratio&, const zrf_Ratio&);
　　测试用主函数：*/
#include <iostream>
#include <cassert>
using namespace std;
class zrf_Ratio
{
friend std::ostream& operator<<(std::ostream&, const zrf_Ratio&);
friend std::istream& operator>>(std::istream&, zrf_Ratio&);
friend zrf_Ratio operator-(const zrf_Ratio&);
friend zrf_Ratio operator+(const zrf_Ratio&, const zrf_Ratio&);
friend zrf_Ratio operator-(const zrf_Ratio&, const zrf_Ratio&);
friend zrf_Ratio operator*(const zrf_Ratio&, const zrf_Ratio&);
friend zrf_Ratio operator/(const zrf_Ratio&, const zrf_Ratio&);
public:
zrf_Ratio(int=0,int=1);
zrf_Ratio(const zrf_Ratio&);
private:
int num;              //FENZI 
int den;
void reduce();
};
//补充重载函数
//公有成员函数:
zrf_Ratio::zrf_Ratio(int num, int den) : num(num), den(den)
{
reduce();
}
zrf_Ratio::zrf_Ratio(const zrf_Ratio& r) : num(r.num), den(r.den)
{
}


zrf_Ratio operator + (const zrf_Ratio &c1, const zrf_Ratio &c2) {	//重载运算符函数实现

	zrf_Ratio a;
	a.num=c1.den*c2.num+c1.num*c2.den;
	a.den=c1.den*c2.den;
	a.reduce();
	return a;
}

zrf_Ratio operator - (const zrf_Ratio &c1, const zrf_Ratio &c2) {	//重载运算符函数实现

	zrf_Ratio a;
	a.num=c1.num*c2.den-c1.den*c2.num;
	a.den=c1.den*c2.den;
	a.reduce();
	return a;
}

ostream & operator << (ostream & out, const zrf_Ratio& a)
{
	out<<a.num<<"/"<<a.den;
	return out;
}

istream & operator >> (istream & in ,zrf_Ratio& a)
{
	in>>a.num>>a.den;
	return in;
}

zrf_Ratio operator-(const zrf_Ratio& a)
{
	zrf_Ratio temp;
	temp.num = 0-a.num;
	temp.den = a.den;
	return temp;
}

zrf_Ratio operator*(const zrf_Ratio& a, const zrf_Ratio& b)
{
	zrf_Ratio temp;
	temp.den = a.den * b.den;
	temp.num = a.num * b.num;
	temp.reduce();
	return temp;
}

zrf_Ratio operator/(const zrf_Ratio& a, const zrf_Ratio& b)
{
	zrf_Ratio temp;
	temp.den = a.den * b.num;
	temp.num = a.num * b.den;
	temp.reduce();
	return temp;
}

//私有成员函数:
void swap(int &m, int &n)
{
int t;
t=m;
m=n;
n=t;
}
int zrf_Gcd(int m, int n)
{
if (m<n)
swap(m,n);
assert(n>=0);
while (n>0)
{
int r=m%n;
m = n;
n = r;
}
return m;
}
void zrf_Ratio::reduce()
{
if (num == 0 || den == 0)
{
num = 0;
den = 1;
return;
}
if (den < 0)
{
den *= -1;
num *= -1;
}
if (num == 1)
return;
int sgn = (num<0?-1:1);
int g = zrf_Gcd(sgn*num,den);
num /= g;
den /= g;
}
int main()
{
int a = 0, b = 0, c = 0, d = 0;
cin >> a >> b >> c >> d;
zrf_Ratio zrf(a, b),ssh(c, d);
std::cout<<"zrf is:"<<zrf<<"; ssh is:"<<ssh<<'
' ;
std::cout<<"-zrf is:"<<-zrf;
std::cout<<"(zrf-ssh) is:"<<(zrf-ssh)<<endl;
std::cout<<"(zrf+ssh) is:"<<(zrf+ssh)<<endl ;
std::cout<<"(zrf*ssh) is:"<<(zrf*ssh)<<endl;
std::cout<<"(zrf/ssh) is:"<<(zrf/ssh)<<endl ;
return 0;
}
//输入为4个整数，输出见main函数。
/*
例如，当输入为
1 7 26 65
时，输出为
zrf is:1/7; ssh is:2/5
-zrf is:-1/7(zrf-ssh) is:-9/35
(zrf+ssh) is:19/35
(zrf*ssh) is:2/35
(zrf/ssh) is:5/14
*/
