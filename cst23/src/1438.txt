#include<iostream>
#include<cstring>

using namespace std;

struct point
{
	int outdegree[11] , out;
};

point num[10];
int vis[10],cal[50];

void calc(int x)
{
	int r = 0;
	for (int i = 1;i <= cal[0];i++)
	{
		r += x * cal[i];
		cal[i] = r % 10;
		r /= 10;
	}
	if (r > 0)
		cal[++cal[0]] = r;
}

void init()
{
	for (int i = 0;i < 10;i++)
	{
		num[i].out = 0;
		for (int j = 0;j <= 10;j++)
			num[i].outdegree[j] = 0;
	}
	cal[0]=cal[1]=1;
}

void dfs(int i)
{
	vis[i] = 1;
	for (int j = num[i].outdegree[0];j > 0;j--)
		if (!vis[num[i].outdegree[j]])
			dfs(num[i].outdegree[j]);
}

int main()
{
	int k , u , v , i , j , sum , len;
	init();
	char n[35];
	cin >> n >> k;
	len = strlen(n);
	for (i = 0;i < k;i++) 
	{
		cin >> u >> v;
		num[u].outdegree[++(num[u].outdegree[0])] = v;
	}
	for (i = 0;i < 10;i++) 
	{
		memset(vis,0,sizeof(vis));
		sum = 0;
		dfs(i);
		for (j = 0;j < 10;j++)
			if (vis[j])
				sum++;
		num[i].out = sum;
	}
	for (i = 0;i < len;i++) 
	{
		calc(num[n[i] - '0'].out);
	}
	for (i = cal[0];i > 0;i--)
		cout << cal[i];
	return 0;
}

