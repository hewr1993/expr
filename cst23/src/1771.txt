type
   re=record
     l, r, d, w, fa: longint;
   end;
 var
   i, j, k, n, m, t, x: longint;
   f: array[0..101,0..51,0..101] of longint;
   a: array[0..101] of re;
   tree: array[0..101] of longint;
   dis: array[0..101] of longint;
  
 procedure dfs(x: longint);  //计算距离根节点的距离
 var
   i, j, k: longint;
 begin
   if x<0 then exit;
   dis[x] := a[x].d+dis[a[x].fa];
   dfs(a[x].l);
   dfs(a[x].r);
 end;

function dp(i,j,k: longint): longint;
 var
   t, ii, jj, kk: longint;
 begin
   if f[i,j,k]<0 then begin  //当前状态还没有计算过
     f[i,j,k] := maxlongint;
     for ii := 0 to j do begin  //枚举在左右节点分别放置多少个伐木场
       t := (dis[i]-dis[k])*a[i].w;   //以下4句为不在i放置的情况
       if a[i].l<>-1 then inc(t,dp(a[i].l,ii,k));
       if a[i].r<>-1 then inc(t,dp(a[i].r,j-ii,k));
       if t<f[i,j,k] then f[i,j,k] := t;
       if ii<j then begin  //在i放置的情况
         t := 0;
         if a[i].l<>-1 then inc(t,dp(a[i].l,ii,i));
         if a[i].r<>-1 then inc(t,dp(a[i].r,j-ii-1,k)); //右节点是兄弟节点，所以不更改k值
         if t<f[i,j,k] then f[i,j,k] := t;
       end;
     end;
   end;
   exit(f[i,j,k]);
 end;
  
 begin
   readln(n,m);
   for i := 0 to 101 do begin
     a[i].l := -1;
     a[i].r := -1;
   end;
   fillchar(tree,sizeof(tree),0);
   for i := 1 to n do begin
     readln(a[i].w,x,a[i].d);
     if a[x].l=-1 then a[x].l := i else a[tree[x]].r := i; //多叉树转化为二叉树
     a[i].fa := x;
     tree[x] := i;
   end;
   dis[0] := 0;
   a[0].fa := 0;
   dfs(0);  //计算距离
   //for i := 0 to n do writeln(dis[i],' ',i);
   fillchar(f,sizeof(f),200);
   writeln(dp(0,m,0)); //记忆化搜索
 end.
