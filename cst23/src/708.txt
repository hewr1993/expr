#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <complex>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cassert>
#include <complex>
using namespace std;

#define ME(s) memset((s), 0, sizeof((s)))
#define MM(s,a) memset((s),(a),sizeof((s)))
#define MCP(s,a) memcpy((s), (a), sizeof(s))
#define LL long long
#define LD long double
#define PII pair<int, int>
#define PDD pair<double, double>
#define mkp(a,b) make_pair((a),(b))
#define y first
#define x second
#define sqr(a) ((a)*(a))
#define lowbit(x) ((x)&(-(x)))
#define two(x) (1<<(x))
#define contain(mask,x) (((mask)&two(x))!=0)

#ifdef OFFLINEJUDGE
FILE *fin=freopen("mario.in","r",stdin);
FILE *fout=freopen("mario.out","w",stdout);
#else
FILE *fin=stdin;
FILE *fout=stdout;
#endif

LL N,S;
map<LL,int> M;

LL mul_mod(LL a,LL b,LL N){
	LL t=(LL)(a/(LD)N*b+1e-3);
	LL ret=a*b-t*N;
	if(ret<0)	ret+=N;
	return ret;
}

LL pow_mod(LL a,LL n,LL MOD){
	LL ret=1LL;
	while(n){
		if(n&1)
			ret=mul_mod(ret,a,MOD);
		a=mul_mod(a,a,MOD);
		n>>=1;
	}
	return ret;
}

int MillerRabin(LL N,LL t){
	LL S=N-1,R=0;
	while(!(S&1)){
		S>>=1;
		R++;
	}
	LL x=pow_mod(t,S,N),y=0;
	for(int i=0;i<=R;i++){
		y=mul_mod(x,x,N);
		if(y==1&&x!=N-1&&x!=1)
			return 0;
		x=y;
	}
	return x==1;
}

int isPrime(LL N){
	for(int i=2;i*i<=N&&i<=1000;i++)
		if(N%i==0)	return 0;
	if(N<=1000000)	return 1;
	if(!MillerRabin(N,3))	return 0;
	if(!MillerRabin(N,5))	return 0;
	if(!MillerRabin(N,7))	return 0;
	if(!MillerRabin(N,11))	return 0;
	if(!MillerRabin(N,13))	return 0;
	if(!MillerRabin(N,17))	return 0;
	return 1;
}

LL PolarRho(LL N,LL c){
	for(int i=2;i<=20;i++)
		if(N%i==0)	return i;
	LL x=2, y=2, d=1;
	while(d==1){
		x=(mul_mod(x,x,N)+c)%N;
		y=(mul_mod(y,y,N)+c)%N;
		y=(mul_mod(y,y,N)+c)%N;
		d=__gcd(abs(x-y),N);
	}
	return d;
}

int Factorize(LL N,LL c){
	if(N<=1)
		return 0;
	if(isPrime(N)){
		M[N]++;
		return 0;
	}
	LL x=N;
	while(x==N)
		x=PolarRho(N,c--);
	Factorize(x,c);
	Factorize(N/x,c);
}

int cmp(pair<LL,int> a,pair<LL,int> b){
	return a.second>b.second;
}

LL ans[3][3];

int run(){
	if(N/S==1)	return 0;
	M.clear();
	memset(ans,-1,sizeof(ans));
	Factorize(N/S,73);
	vector<pair<LL,int> > v;
	for(map<LL,int>::iterator it=M.begin();it!=M.end();it++)
		v.push_back(*it);
	sort(v.begin(),v.end(),cmp);
	
//	for(int i=0;i<v.size();i++)
//		cout << v[i].first << " " << v[i].second << endl;
	
	if(v.size()>=1){
		if(v[0].second>=8){
			LL A=v[0].first;
			ans[0][0]=S;
			ans[0][1]=S*A;
			ans[0][2]=S*A*A;
			ans[1][0]=S*A*A*A;
			ans[1][1]=S*A*A*A*A;
			ans[1][2]=S*A*A*A*A*A;
			ans[2][0]=S*A*A*A*A*A*A;
			ans[2][1]=S*A*A*A*A*A*A*A;
			ans[2][2]=N;
			return 1;
		}
	}
	
	if(v.size()>=2){ 
		if(v[0].second>=2&v[1].second>=2){
			LL A=v[0].first, B=v[1].first;
			ans[0][0]=S;
			ans[0][1]=S*A;
			ans[0][2]=S*A*A;
			ans[1][0]=S*B;
			ans[1][1]=S*A*B;
			ans[1][2]=S*A*A*B;
			ans[2][0]=S*B*B;
			ans[2][1]=S*A*B*B;
			ans[2][2]=N;
			return 1;
		}
		
		if(v[0].second>=5&&v[1].second>=1){
			LL A=v[0].first, B=v[1].first;
			ans[0][0]=S;
			ans[0][1]=S*A;
			ans[0][2]=S*A*A;
			ans[1][0]=S*B;
			ans[1][1]=S*A*B;
			ans[1][2]=S*A*A*B;
			ans[2][0]=S*A*A*A*B;
			ans[2][1]=S*A*A*A*A*B;
			ans[2][2]=N;
			return 1;
		}
		
	}
	
	if(v.size()>=3){
		if(v[0].second>=2){
			LL B=v[0].first, A=v[1].first, C=v[2].first;
			ans[0][0]=S;
			ans[0][1]=S*A;
			ans[0][2]=S*A*C;
			ans[1][0]=S*B;
			ans[1][1]=S*A*B;
			ans[1][2]=S*A*B*C;
			ans[2][0]=S*B*B;
			ans[2][1]=S*A*B*B;
			ans[2][2]=N;
			return 1;
		}
	}
	
	if(v.size()>=4){
		LL A=v[0].first, B=v[1].first, C=v[2].first, D=v[3].first;
		ans[0][0]=S;
		ans[0][1]=S*A;
		ans[0][2]=S*A*C;
		ans[1][0]=S*B;
		ans[1][1]=S*A*B;
		ans[1][2]=S*A*B*C;
		ans[2][0]=S*B*D;
		ans[2][1]=S*A*B*D;
		ans[2][2]=N;
		return 1;
	}
	
	return 0;
}

int main(){
	ios::sync_with_stdio(false);
	while(cin>>S>>N){
		if(N%S==0&&run()){
			cout << "Mario_wins!" << endl;
			for(int i=0;i<3;i++){
				for(int j=0;j<3;j++)
					cout << ans[i][j] << " ";
				cout << endl;
			}
		}
		else
			cout << "Wario_wins!" << endl;
		cout << endl;
	}
	return 0;
}

