#include <algorithm>
#include <cstring>
#include <cstdio>
#define Cal(x) ((x) * (x - 1) / 2)
 
using namespace std;
 
const int size = 1000000, inf = 1000000000;
 
struct node
  {
    int data, weight, cost;
    node *next, *anti;
  } *ge[15000], *cur[15000], edge[500000];
 
int dist[15000], v[15000], ind[15000], e[10000][2];
int out[101][101], top = 0;
 
node *Add_Edge(int a, int b, int w, int c)
  {
    node *p = &edge[top ++];
    p->data = b, p->weight = w, p->cost = c;
    p->next = ge[a], ge[a] = p;
    return p;
  }
 
void Ins_Edge(int a, int b, int w, int c)
  {
    node *p1 = Add_Edge(a, b, w, c);
    node *p2 = Add_Edge(b, a, 0, -c);
    p1->anti = p2, p2->anti = p1;
  }
 
int DFS(int now, int flow, int s, int t, int &ans)
  {
    if (now == t)
      {
        ans += flow * dist[s];
        return flow;
      }
    v[now] = 1;
    for (node *p = cur[now]; p; p = p->next)
      if (p->weight && ! v[p->data])
        if (dist[now] == dist[p->data] + p->cost)
          {
            int tmp = DFS(p->data, min(p->weight, flow), s, t, ans);
            if (tmp)
              {
                p->weight -= tmp, p->anti->weight += tmp, cur[now] = p;
                return tmp;
              }
          }
    cur[now] = 0;
    return 0;
  }
 
int ReLable(int s, int t)
  {
    int i, minv = inf;
    for (i = s; i <= t; i ++)
      if (v[i])
        for (node *p = ge[i]; p; p = p->next)
          if (! v[p->data] && p->weight)
            minv = min(minv, dist[p->data] + p->cost - dist[i]);
    if (minv == inf) return 0;
    for (i = s; i <= t; i ++)
      if (v[i]) dist[i] += minv, v[i] = 0;
    return 1;
  }
 
int MinCost_Flow(int s, int t)
  {
    memset(dist, 0, sizeof(dist));
    memset(v, 0, sizeof(v));
    int ans = 0;
    do
      for (memcpy(cur, ge, sizeof(ge)); DFS(s, inf, s, t, ans); )
        memset(v, 0, sizeof(v));
    while (ReLable(s, t));
    return ans;
  }
 
int main()
  {
    int n, i, j, x, sum, tot;
    
    //freopen("jsb.in", "r", stdin);
    //freopen("jsb.out", "w", stdout);
    
    scanf("%d", &n);
    memset(ind, 0, sizeof(ind));
    for (tot = 0, i = 1; i <= n; i ++)
      for (j = 1; j <= n; j ++)
        {
          scanf("%d", &x), out[i][j] = x;
          if (i >= j) continue;
          if (x == 0) ind[i] ++;
          if (x == 1) ind[j] ++;
          if (x == 2) e[++ tot][0] = i, e[tot][1] = j;
        }
    
    for (i = 0; i <= tot + n + 1; i ++) ge[i] = 0;
    for (i = 1; i <= tot; i ++)
      {
        Ins_Edge(0, i, 1, 0);
        Ins_Edge(i, tot + e[i][0], 1, 0);
        Ins_Edge(i, tot + e[i][1], 1, 0);
      }
    sum = n * (n - 1) * (n - 2) / 6;
    for (i = 1; i <= n; i ++)
      {
        sum -= Cal(ind[i]);
        for (j = ind[i] + 1; j < n; j ++)
          Ins_Edge(tot + i, tot + n + 1, 1, Cal(j) - Cal(j - 1));
      }
    
    printf("%d
", sum - MinCost_Flow(0, tot + n + 1));
    for (i = 1; i <= tot; i ++)
      for (node *p = ge[i]; p; p = p->next)
        if (p->data > tot && ! p->weight)
          {
            int tmp = p->data - tot;
            out[e[i][tmp != e[i][1]]][e[i][tmp == e[i][1]]] = 1;
            out[e[i][tmp == e[i][1]]][e[i][tmp != e[i][1]]] = 0;
          }
    
    for (i = 1; i <= n; i ++)
      for (j = 1; j <= n; j ++)
        if (j < n)
          printf("%d ", out[i][j]);
        else
          printf("%d
", out[i][j]);
    
    return 0;
  }
