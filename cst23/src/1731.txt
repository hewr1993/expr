#include <cstdio>
#include <utility>
#include <algorithm>

using std::pair;
using std::make_pair;
using std::sort;
using std::unique;

#ifdef unix
#define FMT "%lld"
#else
#define FMT "%I64d"
#endif

typedef long long Val;
typedef pair<int, Val> Pair;
const int kMaxN = 100000;
int n, q, cnt_x, cnt_y;
Val x[kMaxN + 1], y[kMaxN + 1], sum_x[kMaxN + 1], sum_y[kMaxN + 1], axis_x[kMaxN], axis_y[kMaxN];

struct Info {
	int cnt;
	Val sum;
	Info() : cnt(0), sum(0LL) {}
	Info(int cnt_, Val sum_) : cnt(cnt_), sum(sum_) {}
};

inline Info operator + (const Info &a, const Info &b) {
	return Info(a.cnt + b.cnt, a.sum + b.sum);
}

namespace sgt {
	const int kMaxNodeCnt = (kMaxN * 2 - 1 + 18 * kMaxN) * 2;
	
	struct Node {
		Info info;
		Node *son[2];
		Node() {
			son[0] = son[1] = NULL;
		}
		void update() {
			info = son[0]->info + son[1]->info;
		}
	} node_pool[kMaxNodeCnt], *node_idx = node_pool;

	Node *BuildTree(int l, int r) {
		Node *res = node_idx ++;
		if (l < r) {
			int mid = (l + r) >> 1;
			res->son[0] = BuildTree(l, mid);
			res->son[1] = BuildTree(mid + 1, r);
		}
		return res;
	}

	Node *Insert(int x, Node *pos, int pos_l, int pos_r, Val *axis) {
		Node *res = node_idx ++;
		if (pos_l == pos_r) {
			res->info = pos->info + Info(1, axis[x]);
			return res;
		}
		int mid = (pos_l + pos_r) >> 1;
		if (x <= mid) {
			res->son[0] = Insert(x, pos->son[0], pos_l, mid, axis);
			res->son[1] = pos->son[1];
		}
		else {
			res->son[0] = pos->son[0];
			res->son[1] = Insert(x, pos->son[1], mid + 1, pos_r, axis);
		}
		return res->update(), res;
	}

	Pair AskOnRange(int k, Node *lb, Node *rb, int pos_l, int pos_r, Val *axis) {
		if (pos_l == pos_r) return make_pair(pos_l, axis[pos_l]);
		int left = rb->son[0]->info.cnt - lb->son[0]->info.cnt;
		if (left >= k) return AskOnRange(k, lb->son[0], rb->son[0], pos_l, (pos_l + pos_r) >> 1, axis);
		else {
			Pair res = AskOnRange(k - left, lb->son[1], rb->son[1], ((pos_l + pos_r) >> 1) + 1, pos_r, axis);
			res.second += rb->son[0]->info.sum - lb->son[0]->info.sum;
			return res;
		}
	}
}

int BinarySearch(Val *arr, Val x, int rb) {
	int lb = 0;
	while (lb + 1 < rb) {
		int mid = (lb + rb) >> 1;
		if (arr[mid] > x) rb = mid;
		else lb = mid;
	}
	return lb;
}

sgt::Node *at_x[kMaxN + 1], *at_y[kMaxN + 1];

int main() {
	scanf("%d%d", &n, &q);
	for (int i = 1; i <= n; ++ i) scanf(FMT, &x[i]);
	for (int i = 1; i <= n; ++ i) scanf(FMT, &y[i]);
	for (int i = 1; i <= n; ++ i) {
		Val nx = x[i] + y[i], ny = x[i] - y[i];
		x[i] = nx, y[i] = ny;
		axis_x[cnt_x ++] = nx;
		axis_y[cnt_y ++] = ny;
		sum_x[i] = sum_x[i - 1] + x[i];
		sum_y[i] = sum_y[i - 1] + y[i];
	}
	sort(axis_x, axis_x + cnt_x);
	cnt_x = unique(axis_x, axis_x + cnt_x) - axis_x;
	sort(axis_y, axis_y + cnt_y);
	cnt_y = unique(axis_y, axis_y + cnt_y) - axis_y;
	for (int i = 1; i <= n; ++ i) {
		x[i] = BinarySearch(axis_x, x[i], cnt_x);
		y[i] = BinarySearch(axis_y, y[i], cnt_y);
	}
	at_x[0] = sgt::BuildTree(0, cnt_x - 1);
	at_y[0] = sgt::BuildTree(0, cnt_y - 1);
	for (int i = 1; i <= n; ++ i) {
		at_x[i] = sgt::Insert(x[i], at_x[i - 1], 0, cnt_x - 1, axis_x);
		at_y[i] = sgt::Insert(y[i], at_y[i - 1], 0, cnt_y - 1, axis_y);
	}
	for (int l, r; q --; ) {
		scanf("%d%d", &l, &r);
		int k = (r - l + 2) >> 1;
		Pair res_x = sgt::AskOnRange(k, at_x[l - 1], at_x[r], 0, cnt_x - 1, axis_x);
		Pair res_y = sgt::AskOnRange(k, at_y[l - 1], at_y[r], 0, cnt_y - 1, axis_y);
		Val ans = (axis_x[res_x.first] * k - res_x.second) + (sum_x[r] - sum_x[l - 1] - res_x.second - axis_x[res_x.first] * (r - l + 1 - k)) +
			(axis_y[res_y.first] * k - res_y.second) + (sum_y[r] - sum_y[l - 1] - res_y.second - axis_y[res_y.first] * (r - l + 1 - k));
		printf(FMT, ans >> 1);
		if (ans & 1) printf(".50
");
		else printf(".00
");
	}
	return 0;
}

