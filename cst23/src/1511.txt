#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>

using namespace std;

const int MAXK = 1000010;

typedef long long Matr[3][3];

long long len[MAXK];
int next[MAXK];
bool have[MAXK];
Matr matrix[MAXK];
long long reachTime[MAXK];
long long n, k, p;
int fipos, fival;

void copyMatrix(Matr ret, Matr rr)
{
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j)
			ret[i][j] = rr[i][j];
}

void mulMatrix(Matr ret, Matr va, Matr vb)
{
	Matr rr;
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j)
		{
			long long t = 0;
			for (int k = 0; k < 3; ++k)
			{
				t += va[i][k] * vb[k][j];
				t %= p;
			}
			rr[i][j] = t % p;
		}
	copyMatrix(ret, rr);
}

void matrixOne(Matr ret)
{
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j)
			ret[i][j] = ((i==j)?1:0);
}

void expMatrix0(Matr ret, Matr va, long long ex)
{
	if (ex==0)
	{
		matrixOne(ret);
		return ;
	}
	expMatrix0(ret, va, ex / 2);
	mulMatrix(ret, ret, ret);
	if (ex & 1)
		mulMatrix(ret, ret, va);
}

void expMatrix(Matr ret, Matr va, long long ex)
{
	Matr rr;
	expMatrix0(rr, va, ex);
	copyMatrix(ret, rr);
}

void getFibMatrix(Matr ret, long long nn)
{
	Matr v1;
	v1[0][0] = v1[0][2] = v1[1][2] = v1[2][0] = v1[2][1] = 0;
	v1[0][1] = v1[1][0] = v1[1][1] = v1[2][2] = 1;
	expMatrix(ret, v1, nn);
}

bool solve(long long k, long long a, long long &x, long long &y, long long mm)
{
	if (a==0)
	{
		x = 1; y = 0;
		return k==1;
	}
	bool r = solve(a, k%a, y, x, mm);
	if (!r) return false;
	y -= k / a * x;
	y %= mm;
	return true;
}

int inv(int x, int k)
{
	long long v1, v2;
	bool can = solve(k, x, v1, v2, k);
	if (!can)
		return -1;
	return ((v2%k)+k)%k;
}

void prepare()
{
	memset(have, 0, sizeof(have));
	memset(len, 0, sizeof(len));
	int a = 0, b = 1;
	int ps = 1;
	fipos = 0;
	long long cm[2][2];
	cm[0][0] = cm[1][1] = 1;
	cm[1][0] = cm[0][1] = 0;
	have[0] = true;
	while (1)
	{
		long long tmp = (cm[0][0] + cm[1][0]) % p;
		cm[0][0] = cm[1][0]; cm[1][0] = tmp;
		tmp = (cm[0][1] + cm[1][1]) % p;
		cm[0][1] = cm[1][1]; cm[1][1] = tmp;
		if (!have[b])
		{
			have[b] = true;
			int r = inv(b, k);
			long long tr = r;
			next[r] = (a * tr) % k;
			if (r > 0)
			{
				len[r] = ps;
				matrix[r][2][0] = matrix[r][2][1] = 0;
				matrix[r][0][2] = matrix[r][1][2] = matrix[r][2][2] = 1;
				matrix[r][0][0] = cm[0][0]; matrix[r][0][1] = cm[0][1]; matrix[r][1][0] = cm[1][0]; matrix[r][1][1] = cm[1][1];
			}
		}
		++ps;
		int c = (a + b) % k;
		a = b; b = c;
		if (b==1 && ps>2 && fipos==0)
		{
			fipos = ps; fival = a;
		}
		if (a==0 && b==1)
			break;
	}
}

long long roundTime;
int firstInRound;

void calcReachTime()
{
	memset(reachTime, 0, sizeof(reachTime));
	long long ct = fipos;
	int cv = fival;
	while (!reachTime[cv])
	{
		reachTime[cv] = ct;
		ct += len[cv];
		cv = next[cv];
	}
	roundTime = ct - reachTime[cv];
	firstInRound = cv;
}

void getRoundMatrix(Matr ret, int fi, long long ti)
{
	if (ti < len[fi])
	{
		getFibMatrix(ret, ti);
		return ;
	}
	getRoundMatrix(ret, next[fi], ti - len[fi]);
	mulMatrix(ret, ret, matrix[fi]);
}

Matr curMatrix;
Matr t1, t2, t3;

void getResult(long long n)
{
	if (n < fipos)
	{
		getFibMatrix(curMatrix, n);
		return ;
	}
	getFibMatrix(curMatrix, fipos);
	curMatrix[0][2] = curMatrix[1][2] = 1;
	n -= fipos;
	int curv = fival;
	while (curv != firstInRound)
	{
		if (next[curv]==0)
			break;
		if (n < len[curv])
		{
			getFibMatrix(t1, n);
			mulMatrix(curMatrix, t1, curMatrix);
			return ;
		}
		mulMatrix(curMatrix, matrix[curv], curMatrix);
		n -= len[curv];
		curv = next[curv];
	}
	if (roundTime == 0)
	{
		if (n > 0)
		{
			getFibMatrix(t1, n);
			mulMatrix(curMatrix, t1, curMatrix);
			return ;
		}
	}
	else
	if (n >= roundTime)
	{
		getRoundMatrix(t1, firstInRound, roundTime);
		expMatrix(t1, t1, n / roundTime);
		n %= roundTime;
		mulMatrix(curMatrix, t1, curMatrix);
	}
	getRoundMatrix(t1, firstInRound, n);
	mulMatrix(curMatrix, t1, curMatrix);
}

int main()
{
	cin >> n >> k >> p;
	prepare();
	calcReachTime();
	matrixOne(curMatrix);
	getResult(n);
	cout << ((curMatrix[0][1] - curMatrix[0][2]) + p) % p << endl;
	return 0;
}

