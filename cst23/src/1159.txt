#include <iostream>
#include <cstring>
#include <cassert>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;

#define For(i, n) for (int i = 0; i < (n); i ++)
#define Forn(i, n) for (int i = 1; i <= (n); i ++)

const int N = 46342;
int prime[N], nprime;
int *prime_end;
bool not_prime[N];

typedef int Num_t;
typedef long long int Bignum_t;

Num_t power_mod(Num_t a, Num_t b, Num_t mod)
{
    Num_t ret = 1;
    while (b)
    {
        if (b & 1)
            ret = (Bignum_t)ret * a % mod;
        a = (Bignum_t)a * a % mod;
        b >>= 1;
    }
    return ret;
}
/*
 * Primality test using Miller-Rabin algorithm
 * Please inspect http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test
 */
bool is_prime(Num_t n)
{
    if (n < 0)
        n = - n;
    if (n <= 1)
        return false;
    if (n == 2 || n == 7 || n == 61)
        return true;
    if (n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 ||
        n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n % 23 == 0)
        return false;
    const int test_num[] = {2, 7, 61};
    for (int i = 0; i < 3; i ++)
    {
        Num_t a = test_num[i];
        Num_t d = n - 1;
        int cnt = 0;
        while (~d & 1)
            d >>= 1, cnt ++;
        Num_t t = power_mod(a, d, n);
        if (!cnt)
        {
            if (t != 1)
                return false;
            else
                continue;
        }
        if (t == n - 1 || t == 1)
            continue;
        bool found = false;
        while (-- cnt)
        {
            t = (Bignum_t)t * t % n;
            if (t == n - 1)
            {
                found = true;
                break;
            }
            if (t == 1)
                return false;
        }
        if (!found)
            return false;
    }
    return true;
}

int main()
{
    int l, r, ans = 0;
    cin >> l >> r;
    if (l == 2)
        ans ++;
    if (~l & 1)
        l ++;
    for (int i = l; i >= 1 && i <= r; i += 2)
        ans += is_prime(i);
    cout << ans << endl;
    return 0;
}

