#include<iostream>
#include<cmath>
#include<algorithm>
//#include<stdio.h>
using namespace std;
const long long maxn=1000010;
typedef long long lint;
lint n,k,h1[maxn],h2[maxn],g[maxn],f[maxn];
lint st[maxn],s1[maxn],s2[maxn];

lint calc(lint a,lint b,lint c,lint l,lint r)
{
  long double x=(long double)-b/(2*a);
  if(x<=l) return(a*l*l+b*l+c);
  if(x>=r) return(a*r*r+b*r+c);
  l=(lint)ceil(x);r=(lint)floor(x);
  return(min(a*l*l+b*l+c,a*r*r+b*r+c));
}
lint cost(lint* h,lint i,lint j,lint l,lint r)
{
  if (j==i-1) return(j==0?0:abs(h[i]-h[j])*k);
  if (j==0)
  { lint a=i-j-1;
    lint b=-k-2*s1[i-1];
    lint c=k*h[i]+s2[i-1];
    return(calc(a,b,c,l,r));
  }
  lint a=i-j-1;
  lint b=-2*(k+s1[i-1]-s1[j]);
  lint c=k*(h[i]+h[j])+s2[i-1]-s2[j];
  return(calc(a,b,c,l,r));
}   
  
void make(lint* h,lint* f)
{
  lint top=1;
  for(lint i=1;i<=n;i++)
  { s1[i]=s1[i-1]+h[i];s2[i]=s2[i-1]+h[i]*h[i];}
  for(lint i=1;i<=n;i++)
  { top++;
    f[i]=maxn*maxn*maxn;
    do{
       top--;
       lint j=st[top];
       f[i]=min(f[i],f[j]+cost(h,i,j,h[st[top+1]],j==0?h[i]:min(h[i],h[j])));
       }
    while (top>1&&h[st[top]]<h[i]);
    top++;
    st[top]=i;
  }
}
int main()
{ //freopen("brick.in","r",stdin);
  //freopen("brick.out","w",stdout);
  lint i;
  //scanf("%I64d %I64d",&n,&k);
  cin>>n;cin>>k;
  for (i=1;i<=n;i++)
  { //scanf("%I64d",&h1[i])
    cin>>h1[i];
    h2[n+1-i]=h1[i];}
  make(h1,f);make(h2,g);
  lint ans=maxn*maxn*maxn;
  for(i=1;i<=n;i++)
    ans=min(f[i]+g[n+1-i],ans);
  //printf("%I64d
",ans);
  cout<<ans<<endl;
  //for(i=1;i<=n;i++) cout<<f[i]<<" "<<g[n+1-i]<<endl;
}
    
  

