#include<cstdio>
#include<map>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;

const int MAX=100000+10;
typedef long long LL;

struct Ninja
{
    int x,y,dir,num;
    int next[6],succ[6],lable[6];
    int del;
    void init(){scanf("%d %d %d",&x,&y,&dir);}
    void print(){printf("%d %d %d
",x,y,dir);}
    friend bool operator < (const Ninja& a,const Ninja& b)
    {
        if(a.x!=b.x)return a.x<b.x;
        else return a.y>b.y;
    }
    friend int operator - (const Ninja& a,const Ninja& b)
    {
        int ans=0;
        if(a.x==b.x)ans=abs(a.y-b.y)+2;
        if(a.y==b.y)ans=abs(a.x-b.x)+2;
        if(a.x+a.y==b.x+b.y)ans=(abs(a.x-b.x)+1)*2;
        if(a.x-a.y==b.x-b.y)ans=(abs(a.x-b.x)+1)*2;
        return ans;
    }
}a[MAX];

struct Kind
{
    int first;
    Ninja* second;
    friend int operator < (const Kind& a,const Kind& b)
    {
        if(a.first!=b.first)return a.first<b.first;
        else return *(a.second)<*(b.second);
    }
    Kind(int a,Ninja* b){first=a;second=b;}
};

typedef vector< Kind > List;
struct Meet
{
    int time;
    int x,y;
    int kind;
    friend int operator < (const Meet& a,const Meet& b)
    {
        return a.time<b.time;
    }
    Meet(int a,int b,int c,int d){time=a;x=b;y=c;kind=d;}
};

priority_queue<Meet> q;
vector<Meet> vec;
vector<int> vec1;
int n,W,H,end[MAX],point[MAX*10];
List que[4];

void insert(int i,int j,int k)
{
    q.push(Meet(-abs(a[i]-a[j]),i,j,k));
}

struct seg
{
    int x,l,r;
    int k;
    seg(int a,int b,int c,int d){x=a;l=b;r=c;k=d;}
    seg(){};
    void print(){printf("%d %d %d %d
",x,l,r,k);}
    friend bool operator < (const seg& a,const seg& b)
    {
        return a.x<b.x;
    }
}line[MAX*3];
int tot;

map<int,int> change;

struct node
{
    int cover,sum;
    node *lc,*rc;
    friend node operator + (node& a,node& b)
    {
        node c;
        if(&a)c.sum+=a.sum;
        if(&b)c.sum+=b.sum;
        c.lc= &a;c.rc= &b;
        return c;
    }
    node(){cover=sum=0;}
}tree[MAX*30];
int cnt;

void insert(node* now,int l,int r,int a,int b,int delta)
{
    if(b<=l||r<=a)return;
    if(a<=l && r<=b)
    {
        now->cover+=delta;
        if((now->cover)==1)now->sum=point[r]-point[l];
        else if((now->cover)==0) (*now)=*(now->lc)+*(now->rc);
        return;
    }
    int mid=(l+r)>>1;
    if(l<mid)insert( (now->lc)?(now->lc):(now->lc)=&tree[++cnt] ,l,mid,a,b,delta);
    if(mid<r)insert( (now->rc)?(now->rc):(now->rc)=&tree[++cnt],mid,r,a,b,delta);
    if(!now->cover)(*now)=*(now->lc)+*(now->rc);
}

int ma[1000][1000],hh[1000];
int qq[6][3]=
{
    {0,0,2},
    {2,1,3},
    {1,1,2},
    {1,0,3},
    {3,1,0},
    {3,2,3}
};
int pp[6]={0,2,1,1,3,3};

int main()
{
    scanf("%d %d",&W,&H);
    scanf("%d",&n);
    int i;
    for(i=1;i<=n;++i)
    {
        a[i].init();
        a[i].dir=3-a[i].dir;
        a[i].lable[0]=a[i].x;
        a[i].lable[1]=a[i].y;
        a[i].lable[2]=a[i].lable[3]=a[i].y+a[i].x;
        a[i].lable[4]=a[i].lable[5]=a[i].y-a[i].x;
        a[i].num=i;
    }
    for(i=1;i<=n;++i)
    {
        que[0].push_back(Kind(a[i].x,a+i));
        que[1].push_back(Kind(a[i].x+a[i].y,a+i));
        que[2].push_back(Kind(a[i].y,a+i));
        que[3].push_back(Kind(a[i].x-a[i].y,a+i));
    }
    for(i=0;i<4;++i)sort(que[i].begin(),que[i].end());
    /*..................................................*/
    int now,last;
    size_t iter;
    for(i=0;i<6;++i)
    {
        int k=qq[i][0],l1=qq[i][1],l2=qq[i][2];
        last=0;
        for(iter=0;iter<que[k].size();++iter)
            if(que[k][iter].second->dir==l1||que[k][iter].second->dir==l2)
            {
                now=que[k][iter].second->num;
                if(last && a[now].lable[i] != a[last].lable[i] )last=0;
                a[now].next[i]=last;
                if(last)a[last].succ[i]=now;
                if(last && a[now].dir==l1 && a[last].dir==l2)
                {
                    insert(now,last,i);
                }
                last=now;
            }
    }
    
    /*..................................................*/
    vector<Meet>::iterator it;
    vector<int>::iterator it1;
    int x;
    while(!q.empty())
    {
        now=-q.top().time;
        while(!q.empty() && q.top().time==-now)
        {
            if(!end[q.top().x]&&!end[q.top().y])vec.push_back(q.top());
            q.pop();
        }
        for(it=vec.begin();it!=vec.end();++it)
        {
            if(end[it->x]!=now)vec1.push_back(it->x);
            if(end[it->y]!=now)vec1.push_back(it->y);
            end[it->x]=now;
            end[it->y]=now;
        }
        for(it1=vec1.begin();it1!=vec1.end();++it1)
        {
            x=*it1;
            for(i=0;i<6;++i)
            {
                if(!a[x].succ[i] || !end[a[x].succ[i]] )
                {
                    int next=a[x].next[i],pre=a[x].succ[i];
                    while(end[next] && next)next=a[next].next[i];
                    if(next)a[next].succ[i]=pre;
                    if(pre)a[pre].next[i]=next;
                    if( pre && next && a[pre].dir==qq[i][1] && a[next].dir==qq[i][2] )insert(pre,next,i);
                }
            }
        }
        vec.clear();
        vec1.clear();
    }
    for(i=1;i<=n;++i)
        if(!end[i])
        {
            if(a[i].dir==0)end[i]=(H-a[i].y+1)*2;
            if(a[i].dir==1)end[i]=a[i].x*2;
            if(a[i].dir==2)end[i]=a[i].y*2;
            if(a[i].dir==3)end[i]=(W-a[i].x+1)*2;
        }
    int dist;
    for(i=1;i<=n;++i)
    {
        dist=(end[i]+1)/2-1;
        if(a[i].dir==0)
        {
            line[++tot]=seg(a[i].x,a[i].y,a[i].y+1+dist,1);
            line[++tot]=seg(a[i].x+1,a[i].y,a[i].y+1+dist,-1);
        }else if(a[i].dir==3)
        {
            line[++tot]=seg(a[i].x,a[i].y,a[i].y+1,1);
            line[++tot]=seg(a[i].x+1+dist,a[i].y,a[i].y+1,-1);
        }else if(a[i].dir==2)
        {
            line[++tot]=seg(a[i].x,a[i].y-dist,a[i].y+1,1);
            line[++tot]=seg(a[i].x+1,a[i].y-dist,a[i].y+1,-1);
        }else if(a[i].dir==1)
        {
            line[++tot]=seg(a[i].x-dist,a[i].y,a[i].y+1,1);
            line[++tot]=seg(a[i].x+1,a[i].y,a[i].y+1,-1);
        }
    }
    for(i=1;i<=tot;++i)
    {
        change[line[i].l]=1;
        change[line[i].r]=1;
    }
    map<int,int>::iterator ite;
    int mm=0;
    for(ite=change.begin();ite!=change.end();++ite)
    {
        ite->second=++mm;
        point[mm]=ite->first;
    }
    sort(line+1,line+tot+1);
    for(i=1;i<=tot;++i)
    {
        line[i].l=change[line[i].l];
        line[i].r=change[line[i].r];
    }
    last=1;
    LL answer=0;
    for(i=1;i<=tot;++i)
    {
        now=line[i].x;
        answer+=(LL)tree[0].sum*(now-last);
        for(;line[i].x==now;++i)
        {
            insert(&tree[0],1,mm,line[i].l,line[i].r,line[i].k);
        }
        --i;
        last=now;
    }
    printf("%I64d
",answer);
}

