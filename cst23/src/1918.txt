//By Lin
#include<cstdio>
#include<cstring>
#include<algorithm>
#define maxn 100005
using namespace std; 

int		mark[maxn],x[maxn],cnt,n,m,k; 
int		F[maxn],ans[maxn];

struct	Node{
	int l,r; 
}data[maxn]; 

bool	cmp( const Node &a , const Node &b ){
	return (a.l!=b.l)?a.l<b.l:a.r>b.r;
}

int		find(int key ,int k ) 
{
	int g = 0 , h = cnt-1, ret = k == 0?cnt:0; 
	while ( g <= h )
	{
		int mid = (g+h)/2;
		if ( x[mid] == key ) { ret = mid; break; } 
		if ( x[mid] < key ) {
			g = mid + 1; 
			if ( k == 1 ) ret = mid;
		}
		else {
			h = mid - 1; 
			if ( k == 0 ) ret = mid; 
		}
	}
	return ret; 
}

int		find(int g ,int h , int key ) 
{
	int ret = m;
	while ( g <= h ) {
		int mid = ( g + h )/2;
		if ( data[mid].l >= key ) 
			ret = mid , h = mid - 1; 
		else g = mid + 1; 
	}
	return ret; 
}
int		main()
{
	int l,r,flag;
	scanf("%d%d%d", &n , &k , &m ); 
	cnt = 0; 
	for (int i = 0; i<m; i++ ){
		scanf("%d%d%d", &l , &r , &flag ); 
		if ( flag == 0 ) mark[l] += 1 , mark[r+1] += -1; 
		else {
			data[cnt].l = l; 
			data[cnt++].r = r; 
		}
	}
	m = cnt; 
	cnt = 0; 
	for (int i = 1, j = 0; i<=n; i++) {
		j += mark[i];
		if ( j == 0 ) x[cnt++] = i; 
	}
/*	for (int i = 0; i<cnt; i++) printf("%d " , x[i] );
	printf("
");*/
	if ( cnt == k ) {
		for (int i = 0; i<cnt; i++) printf("%d
" , x[i] );
		if ( cnt == 0 ) printf("-1
");
		return 0; 
	}
	for (int i = 0; i < m; i++) 
		data[i].l = find(data[i].l,0) , data[i].r = find(data[i].r,1);
	sort( data , data+m , cmp );
	cnt = 0; 
	for (int i = 0; i < m; i++) {
		while ( cnt && data[cnt-1].r >= data[i].r ) cnt--;
		data[cnt++] = data[i];
	}
	m = cnt; 

	F[m] = 0; 
	for (int i = m-1; i>=0; i-- )
	{
		int g = find(i+1,m-1,data[i].r+1);
		F[i] = 1 + F[g];
	}

	cnt = 0; 
	for (int i = 0, now = 0; i<m; i = find(i+1,m-1,data[i].r+1), now++ ) 
	{
		if ( data[i].l == data[i].r ) {
			ans[cnt++] = data[i].r;
			continue; 
		}
		int g = find(i+1,m-1,data[i].r );
		if ( now + 1 + F[g] > k ) 
			ans[cnt++] = data[i].r; 
	}
	for (int i = 0; i<cnt; i++) printf("%d
" , x[ans[i]] );
	if ( cnt == 0 ) printf("-1
");
	return 0; 
}

