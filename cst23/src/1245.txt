#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <iostream>
#define Rep(i,j,k) for (int i=(j); i<=(k); i++)
using namespace std;
typedef long long LL;
#define maxn 130000

int N,L,R,Q,K;
int a[maxn];

struct T{
	int segl, segr;
	LL mx,mn,ans;
} t[maxn*4];

void build(int x, int l, int r){
	t[x].segl=l, t[x].segr=r;
	t[x].mx=t[x].mn=a[l]-2LL*R*l;
	t[x].ans=-(1LL)<<60;
	if (l==r) return;
	int mid=(l+r)/2;
	build(2*x,l,mid);
	build(2*x+1,mid+1,r);
	t[x].mx=max(t[2*x].mx,t[2*x+1].mx);
	t[x].mn=min(t[2*x].mn,t[2*x+1].mn);
	t[x].ans=max(max(t[2*x].ans,t[2*x+1].ans),t[2*x+1].mx-t[2*x].mn);
}

LL ans;
pair<LL,LL> dfs(int x, int l, int r){
	if (l<=t[x].segl && t[x].segr<=r)
		return ans=max(ans,t[x].ans), make_pair(t[x].mn,t[x].mx);
	int mid=(t[x].segl+t[x].segr)/2;
	if (r<=mid) return dfs(2*x,l,r);
	if (l>mid) return dfs(2*x+1,l,r);
	pair<LL,LL> a=dfs(2*x,l,r);
	pair<LL,LL> b=dfs(2*x+1,l,r);
	ans=max(ans,b.second-a.first);
	return make_pair(min(a.first,b.first),max(a.second,b.second));
}

double query(int l, int r){
	ans=0;
	pair<LL,LL> a=dfs(1,l,r);
	int n=r-l+1;
	if (K==1)
		return max( ans/2.0, 1.0*max( a.second+R+2LL*R*(l-1), -a.first+L+(LL)R*(-2*n-1-2*(l-1)) ) );
	else
		return max(a.second-a.first+L-2.0*R*n, ans*1.0)/2.0;
}

int main(){
	
	int _; cin>>_;
	while(_--){
		cin>>N>>L>>R>>Q>>K;
		Rep(i,1,N) scanf("%d",a+i);
		build(1,1,N);
		printf("%.5lf
",query(1,N));
		while(Q--){
			int x,y; scanf("%d%d",&x,&y);
			printf("%.5lf
",query(x,y));
		}
	}

    return 0;
}

