
// 2011.1.2 rset

#include <algorithm>
#include <cstring>
#include <cstdio>
#include <vector>

using namespace std;

int p[1001], cnt[1001];
bool chk[1001];

void Add(vector<int> &a, vector<int> &b)
  {
    int i, t, w = 0;
    b.push_back(0);
    for (i = 0; i < b.size(); i ++)
      if (i < a.size())
        {
          t = a[i] + b[i] + w;
          a[i] = t % 10000, w = t / 10000;
        }
      else
        {
          t = b[i] + w, w = t / 10000;
          a.push_back(t % 10000);
        }
    for ( ; a.size() && *(a.rbegin()) == 0; a.pop_back());
  }

void Reduce(vector<int> &a, vector<int> &b)
  {
    for (int i = 0; i < a.size(); i ++)
      {
        if (i < b.size()) a[i] -= b[i];
        if (a[i] < 0) a[i] += 10000, a[i+1] --;
      }
    for ( ; a.size() && *(a.rbegin()) == 0; a.pop_back());
  }

void Multiply(vector<int> &a, int b)
  {
    int i, t, w = 0;
    for (i = 0; i < a.size(); i ++)
      t = a[i] * b + w, a[i] = t % 10000, w = t / 10000;
    for ( ; w > 0; w /= 10000) a.push_back(w % 10000);
  }

void Multiply(vector<int> &a, vector<int> &b, vector<int> &c)
  {
    int i, j, t, w;
    for (c.clear(), i = 0; i < a.size(); i ++)
      {
        for (w = 0, j = 0; j < b.size(); j ++)
          {
            if (i + j >= c.size()) c.push_back(0);
            t = a[i] * b[j] + c[i+j] + w;
            c[i+j] = t % 10000, w = t / 10000;
          }
        if (w > 0) c.push_back(w);
      }
  }

int main()
  {
    vector<int> tmp1, tmp2, tmp3, tmp4, ans;
    int n, tot, i, j, k, tmp;
    
    scanf("%d", &n);
    memset(chk, false, sizeof(chk));
    for (tot = 0, i = 2; i <= n; i ++)
      {
        if (! chk[i]) p[++ tot] = i;
        for (j = 1; j <= tot && i * p[j] <= n; j ++)
          {
            chk[i*p[j]] = true;
            if (i % p[j] == 0) break;
          }
      }
    
    for (i = 1; i * 2 <= n; i ++)
      {
        memset(cnt, 0, sizeof(cnt));
        for (j = i + 1; j <= 2 * i; j ++)
          for (tmp = j, k = 1; tmp != 1; k ++)
            for ( ; tmp % p[k] == 0; tmp /= p[k]) cnt[k] ++;
        for (j = 1; j <= i; j ++)
          for (tmp = j, k = 1; tmp != 1; k ++)
            for ( ; tmp % p[k] == 0; tmp /= p[k]) cnt[k] --;
        cnt[1] --, tmp1.clear(), tmp1.push_back(1);
        for (j = 1; j <= tot; j ++)
          for (k = 1; k <= cnt[j]; k ++)
            Multiply(tmp1, p[j]);
        cnt[1] ++, tmp2.clear(), tmp2.push_back(1);
        for (tmp = i + 1, j = 1; tmp != 1; j ++)
          for ( ; tmp % p[j] == 0; tmp /= p[j]) cnt[j] --;
        for (j = 1; j <= tot; j ++)
          for (k = 1; k <= cnt[j]; k ++)
            Multiply(tmp2, p[j]);
        Reduce(tmp1, tmp2);
        
        memset(cnt, 0, sizeof(cnt));
        for (j = n - 2 * i + 1; j <= n; j ++)
          for (tmp = j, k = 1; tmp != 1; k ++)
            for ( ; tmp % p[k] == 0; tmp /= p[k]) cnt[k] ++;
        for (j = 1; j <= 2 * i; j ++)
          for (tmp = j, k = 1; tmp != 1; k ++)
            for ( ; tmp % p[k] == 0; tmp /= p[k]) cnt[k] --;
        tmp3.clear(), tmp3.push_back(1);
        for (j = 1; j <= tot; j ++)
          for (k = 1; k <= cnt[j]; k ++)
            Multiply(tmp3, p[j]);
        
        Multiply(tmp1, tmp3, tmp4), Add(ans, tmp4);
      }
    
    printf("%d", *(ans.rbegin()));
    for (i = ans.size() - 2; i >= 0; i --)
      {
        printf("%d%d", ans[i] / 1000, ans[i] % 1000 / 100);
        printf("%d%d", ans[i] % 100 / 10, ans[i] % 10);
      }
    printf("
");
    
    return 0;
  }

